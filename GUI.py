import tkinter as tk
from tkinter import messagebox, ttk
import numpy as np
import pandas as pd
import joblib
import warnings
warnings.filterwarnings("ignore", category=UserWarning, module="xgboost.core")
# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ (—É–∫–∞–∂–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–º—è)
model = joblib.load('trained_ensemble_20250524_145441.joblib')  # üëà –∑–∞–º–µ–Ω–∏—Ç–µ!

feature_names = [
    'Gender', 'Age', 'Driving_License', 'Region_Code',
    'Previously_Insured', 'Vehicle_Age', 'Vehicle_Damage',
    'Annual_Premium', 'Policy_Sales_Channel', 'Vintage'
]

# –ö–æ–¥—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
category_maps = {
    'Gender': {'–ú—É–∂—Å–∫–æ–π': 1, '–ñ–µ–Ω—Å–∫–∏–π': 0},
    'Vehicle_Age': {'< 1 –≥–æ–¥': 0, '1-2 –≥–æ–¥–∞': 1, '> 2 –ª–µ—Ç': 2},
    'Vehicle_Damage': {'–î–∞': 1, '–ù–µ—Ç': 0}
}


def predict_response():
    try:
        input_data = {
            'Gender': category_maps['Gender'][gender_combo.get()],
            'Age': float(entry_fields[0].get()),
            'Driving_License': float(entry_fields[1].get()),
            'Region_Code': float(entry_fields[2].get()),
            'Previously_Insured': float(entry_fields[3].get()),
            'Vehicle_Age': category_maps['Vehicle_Age'][vehicle_age_combo.get()],
            'Vehicle_Damage': category_maps['Vehicle_Damage'][vehicle_damage_combo.get()],
            'Annual_Premium': float(entry_fields[4].get()),
            'Policy_Sales_Channel': float(entry_fields[5].get()),
            'Vintage': float(entry_fields[6].get())
        }

        input_df = pd.DataFrame([input_data])[feature_names]
        prediction = model.predict(input_df)[0]
        confidence = model.predict_proba(input_df)[0][prediction] * 100

        label_result.config(
            text=f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {'–û—Ç–∫–ª–∏–∫–Ω–µ—Ç—Å—è' if prediction == 1 else '–ù–µ –æ—Ç–∫–ª–∏–∫–Ω–µ—Ç—Å—è'}\n"
                 f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}%"
        )

    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {str(e)}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫–Ω–∞
root = tk.Tk()
root.title("–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ (–ê–Ω—Å–∞–º–±–ª—å)")

# –ß–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
labels = [
    "–í–æ–∑—Ä–∞—Å—Ç", "–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ (1/0)", "–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞", "–†–∞–Ω–µ–µ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω (1/0)",
    "–ì–æ–¥–æ–≤–∞—è –ø—Ä–µ–º–∏—è", "–ö–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–∂ –ø–æ–ª–∏—Å–∞", "–°—Ç–∞–∂ –∫–ª–∏–µ–Ω—Ç–∞ (Vintage)"
]

entry_fields = []

# –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
for i, label_text in enumerate(labels):
    tk.Label(root, text=label_text).grid(row=i, column=0, padx=5, pady=5, sticky='e')
    entry = tk.Entry(root, width=30)
    entry.grid(row=i, column=1, padx=5, pady=5)
    entry_fields.append(entry)

row_index = len(labels)

# –ü–æ–ª—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
tk.Label(root, text="–ü–æ–ª").grid(row=row_index, column=0, padx=5, pady=5, sticky='e')
gender_combo = ttk.Combobox(root, values=["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"], state="readonly", width=28)
gender_combo.current(0)
gender_combo.grid(row=row_index, column=1, padx=5, pady=5)

tk.Label(root, text="–í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è").grid(row=row_index+1, column=0, padx=5, pady=5, sticky='e')
vehicle_age_combo = ttk.Combobox(root, values=["< 1 –≥–æ–¥", "1-2 –≥–æ–¥–∞", "> 2 –ª–µ—Ç"], state="readonly", width=28)
vehicle_age_combo.current(0)
vehicle_age_combo.grid(row=row_index+1, column=1, padx=5, pady=5)

tk.Label(root, text="–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è").grid(row=row_index+2, column=0, padx=5, pady=5, sticky='e')
vehicle_damage_combo = ttk.Combobox(root, values=["–î–∞", "–ù–µ—Ç"], state="readonly", width=28)
vehicle_damage_combo.current(0)
vehicle_damage_combo.grid(row=row_index+2, column=1, padx=5, pady=5)

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
tk.Button(root, text="–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", command=predict_response).grid(row=row_index+3, columnspan=2, pady=10)

# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
label_result = tk.Label(root, text="–ú–æ–¥–µ–ª—å: –ê–Ω—Å–∞–º–±–ª—å\n–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", font=("Arial", 12), fg="blue")
label_result.grid(row=row_index+4, columnspan=2, pady=10)

# –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
root.mainloop()
